name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_NOLOGO: 1
    steps:
      - name: Enable NuGet cache
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for MinVer & SonarCloud accurate blame/coverage

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: | 
            8.0.x

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Test
        run: dotnet test --no-build --configuration Release

      - name: Restore tools
        run: dotnet tool restore

      - name: SonarCloud Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # for PR decoration
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet clean
          dotnet sonarscanner begin /k:"roelvandersteen_systemcommandline-configbinder" /o:"roelvandersteen" /d:sonar.token="$SONAR_TOKEN" /d:sonar.cs.vscoveragexml.reportsPaths="coverage.xml"
          dotnet build --no-incremental
          dotnet dotnet-coverage collect "dotnet test --no-build" -f xml -o "coverage.xml"
          dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            coverage.xml
            TestResults/*.trx
          if-no-files-found: warn

      - name: Summary
        if: success()
        run: |
          echo "CI pipeline completed."